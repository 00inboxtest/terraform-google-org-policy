#!/bin/bash
# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# VARIABLES

# Constraints
PROJECT_CONSTRAINT='constraints/compute.disableSerialPortAccess'
FOLDER_CONSTRAINT='constraints/compute.restrictXpnProjectLienRemval'
ORG_CONSTRAINT_BOOL='constraints/compute.disableSerialPortAccess'

# Dynamic vars, generated by `maeke_source.sh`
# shellcheck disable=SC1091
. ../../source.sh
grep -v "qazwsk" ../../source.sh

# Make sure required vars are defined
# shellcheck disable=SC2153
if [[ -z "$FOLDER_1_ID" || -z "$PROJECT_ID" || -z "$PROJECT_EXCLUDE" || -z "$FOLDER_EXCLUDE" ]]; then
    echo "Please, make sure that following variables are set: FOLDER_ID, PROJECT_ID, PROJECT_EXCLUDE, FOLDER_EXCLUDE"
    env
    exit 3
fi
# shellcheck disable=SC2155,SC2153
export FOLDER_ID=$(echo "${FOLDER_1_ID}" | awk -F / '{print $2}')
# shellcheck disable=SC2154
export ORGANIZATION_ID="${TF_VAR_org_id}"
# shellcheck disable=SC2155,SC2153
export FOLDER_EXCLUDE=$(echo "${FOLDER_2_ID}" | awk -F / '{print $2}')

# initialize helpers and set credentials
source /usr/local/bin/task_helper_functions.sh && init_credentials_if_found

[[ -z "$GOOGLE_CREDENTIALS" || -z "$GOOGLE_APPLICATION_CREDENTIALS" ]] && echo "Please define Google credentials" && exit 3

#################################################################
#   FUNCTIONS FOR PREPARING WORKSPACE AND CALLING BATS          #
#################################################################

# Cleans the workdir
function clean_workdir() {
  echo "Cleaning workdir"
  rm -rf terraform.tfstate*
  rm -rf -- *.tf
  rm -rf .terraform
}

# Creates the main.tf file for Terraform
function create_main_tf_file() {
  echo "Creating main.tf file"
  touch main.tf
  cat <<EOF > main.tf

provider "google" {
  version     = "~> 2.5.0"
}

module "org-policy-boolean-project" {
  source = "../../../"

  policy_for  = "project"
  constraint  = "$PROJECT_CONSTRAINT"
  project_id  = "$PROJECT_ID"
  enforce     = "true"
  policy_type = "boolean"
}

module "org-policy-boolean-folder" {
  source = "../../../"

  policy_for  = "folder"
  constraint  = "$FOLDER_CONSTRAINT"
  folder_id   = "$FOLDER_1_ID"
  enforce     = "true"
  policy_type = "boolean"

  exclude_projects = ["$PROJECT_EXCLUDE"]
}

module "org-policy-boolean-org" {
  source = "../../../"

  policy_for       = "organization"
  constraint       = "$ORG_CONSTRAINT_BOOL"
  organization_id  = "$ORGANIZATION_ID"
  enforce          = "true"
  policy_type      = "boolean"

  exclude_folders  = ["$FOLDER_EXCLUDE"]
}

EOF
}

#################################################################
#   WORKSPACE CLEANING, BATS CALLING                            #
#################################################################

# Preparing environment
clean_workdir
create_main_tf_file

# Make sure bats is installed
bats -v || (git clone https://github.com/sstephenson/bats.git && cd bats && ./install.sh /usr/local && cd - && rm -rf bats)

# Call to bats
echo "Test to execute: $(bats integration.bats -c)"
bats integration.bats
bats_exitcode=$?

export CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE=""
unset CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE

# Clean the environment
clean_workdir
echo "Integration test finished"
exit $bats_exitcode
